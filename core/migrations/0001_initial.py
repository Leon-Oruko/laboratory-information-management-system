# Generated by Django 3.2.12 on 2024-04-07 09:38

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChangeLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('model_name', models.CharField(max_length=100)),
                ('object_id', models.PositiveIntegerField()),
                ('action', models.CharField(max_length=20)),
                ('details', models.TextField()),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CustomUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('post', models.CharField(choices=[('Admin', 'Admin'), ('Analyst', 'Analyst'), ('Agronomist', 'Agronomist'), ('Lab Manager', 'Lab Manager')], default='Analyst', max_length=20)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_superuser', models.BooleanField(default=False)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_user_groups', related_query_name='custom_user_group', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='custom_user_permissions', related_query_name='custom_user_permission', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'permissions': [('admin', 'Can access admin features'), ('analyst', 'Can access analyst features'), ('agronomist', 'Can access agronomist features'), ('labmanager', 'Can access lab manager features')],
            },
        ),
        migrations.CreateModel(
            name='Clients',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('contact', models.CharField(max_length=150)),
                ('email', models.EmailField(max_length=254)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Industry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Industry_id', models.IntegerField(auto_created=True)),
                ('Industry_type', models.CharField(max_length=150)),
            ],
            options={
                'ordering': ['Industry_type'],
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_id', models.CharField(max_length=20, unique=True)),
                ('sample_name', models.CharField(max_length=100)),
                ('test_id', models.CharField(choices=[('Chemical', 'Chemical Analysis'), ('Microbiology', 'Microbiology'), ('Full', 'Full analysis')], default='Chemical', max_length=100)),
                ('date_of_registration', models.DateField(default=django.utils.timezone.now)),
                ('stage', models.CharField(choices=[('registration', 'Registration stage'), ('analysis', 'Analysis stage'), ('recommendation', 'Recommendation stage'), ('processing', 'Processing stage'), ('complete', 'Complete')], default='registration', max_length=20)),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.clients')),
                ('registered_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SampleRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date', models.DateField(default=django.utils.timezone.now)),
                ('sample', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.sample')),
            ],
        ),
        migrations.CreateModel(
            name='Microbio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.sample')),
            ],
        ),
        migrations.CreateModel(
            name='LabManagerTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Picked', 'Picked'), ('Invoiced', 'Invoiced')], max_length=20)),
                ('invoice', models.FileField(blank=True, null=True, upload_to='invoices/')),
                ('invoice_date', models.DateField(blank=True, null=True)),
                ('processed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lab_manager_tasks', to=settings.AUTH_USER_MODEL)),
                ('sample', models.OneToOneField(limit_choices_to={'agronomist_task__isnull': False}, on_delete=django.db.models.deletion.CASCADE, related_name='lab_manager_task', to='core.sample')),
            ],
        ),
        migrations.CreateModel(
            name='Full',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.sample')),
            ],
        ),
        migrations.AddField(
            model_name='clients',
            name='industry',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.industry'),
        ),
        migrations.CreateModel(
            name='Chemical',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.sample')),
            ],
        ),
        migrations.CreateModel(
            name='AnalystTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Incomplete', 'Incomplete'), ('Complete', 'Complete')], max_length=20)),
                ('analysis', models.TextField(blank=True, null=True)),
                ('analysis_date', models.DateField(blank=True, null=True)),
                ('picked', models.DateField(auto_now_add=True)),
                ('analyzed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analyst_tasks', to=settings.AUTH_USER_MODEL)),
                ('sample', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.sample')),
            ],
        ),
        migrations.CreateModel(
            name='AgronomistTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interpretation', models.TextField()),
                ('recommendation', models.TextField()),
                ('reviewed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agronomist_tasks', to=settings.AUTH_USER_MODEL)),
                ('sample', models.OneToOneField(limit_choices_to={'analysttask__status': 'Complete'}, on_delete=django.db.models.deletion.CASCADE, related_name='agronomist_task', to='core.sample')),
            ],
        ),
    ]
